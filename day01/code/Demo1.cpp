// Demo1.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include "stdlib.h"
#include "Windows.h"


//int main(int argc, _TCHAR* argv[])
//{
//	printf("hello");
//	printf("\n");
//
//	// 为了防止控制台窗口一闪而过,一般添加下面这行代码
//	// 需要引入 #include "stdlib.h"
//	system("pause");
//	return 0;
//}

// ===============================================================================

//int main(){
//	// 基本数据类型
//	// int short long float double char bool
//
//	int i = 1;
//	// %d -> int
//	printf("%d\n", i);	
//	// %d -> short
//	// %ld -> long
//	// %f -> float
//	// %lf -> double
//	// %c -> char
//
//
//	system("pause");
//	return 0;
//}

// ===============================================================================

//int main(){
//	// 输入
//	int n;
//	scanf("%d", &n);
//	printf("%d\n", n);
//
//	system("pause");
//	return 0;
//}

// ===============================================================================

//int main(){
//	// 数组
//	// 一旦定义数组,在编译阶段必须明确数组元素类型及元素个数
//	int arr1[10];
//	int arr2[] = { 1, 2, 3 };
//
//	int n = 10;
//	// 以下方式错误,原因,编译阶段无法获取数据大小
//	// n 只有在运行时,才知道为 10
//	// int arr3[n];
//
//	// 静态分配的内存不能太大,容易内存溢出
//	// 静态分配的数组存储在栈中,动态分配的数据存储在堆中
//	// 0xC00000FD : Stack overflow(参数 : 0x00000000, 0x00072000)。
//	// int arr4[1024 * 1024];
//
//	// 动态分配内存
//	int *p;
//	p = (int*)malloc(sizeof(int)* 1024 * 1024);
//	// 释放内存
//	delete(p);
//
//	system("pause");
//	return 0;
//}

// ===============================================================================

//int main(){
//	// 指针
//	int *p;
//	int i = 10;
//	p = &i;
//	printf("p的地址 %#x \n", p);
//	printf("i的地址 %#x \n", &i);
//	printf("p指向的值 %d\n", *p);
//	// 由于指针变量存储的为地址
//	// 在同一个系统中,不同类型的指针变量占用内存是相同的
//	printf("p占用的内存 %d\n", sizeof(p));
//
//	system("pause");
//	return 0;
//}

// ===============================================================================

//int main(){
//	system("pause");
//	return 0;
//}
